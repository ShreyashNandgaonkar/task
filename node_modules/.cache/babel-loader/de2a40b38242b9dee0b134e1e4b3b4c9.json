{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldUpdateDrawnRows = shouldUpdateDrawnRows;\nexports.setCurrentPosition = setCurrentPosition;\nexports.updatePositionProperties = updatePositionProperties;\nexports.updateRenderedData = updateRenderedData;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _initialState = require('./initial-state');\n\nvar _initialState2 = _interopRequireDefault(_initialState);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction shouldUpdateDrawnRows(action, state) {\n  var height = state.getIn(['currentPosition', 'height']);\n  var width = state.getIn(['currentPosition', 'width']); // If the containers have changed size, update drawn rows.\n\n  if (height != action.yVisible || width != action.xVisible) return true;\n  var yScrollChangePosition = state.getIn(['currentPosition', 'yScrollChangePosition']);\n  var rowHeight = state.getIn(['positionConfig', 'rowHeight']); // Get the current visible record count.\n\n  var visibleRecordCount = getVisibleRecordCount(state); // Get the count of rendered rows.\n\n  var startDisplayIndex = state.getIn(['currentPosition', 'renderedStartDisplayIndex']);\n  var endDisplayIndex = state.getIn(['currentPosition', 'renderedEndDisplayIndex']);\n  var renderedRecordCount = endDisplayIndex - startDisplayIndex; // Calculate the height of a third of the difference.\n\n  var rowDifferenceHeight = rowHeight * (renderedRecordCount - visibleRecordCount) / 3;\n  return Math.abs(action.yScrollPosition - yScrollChangePosition) >= rowDifferenceHeight;\n}\n\nfunction setCurrentPosition(state, yScrollPosition, xScrollPosition) {\n  return state.setIn(['currentPosition', 'yScrollChangePosition'], yScrollPosition).setIn(['currentPosition', 'xScrollChangePosition'], xScrollPosition);\n}\n\nfunction updatePositionProperties(action, state, force) {\n  if (!action.force && !shouldUpdateDrawnRows(action, state) && !_immutable2.default.is(state.get('currentPosition'), (0, _initialState2.default)().get('currentPosition'))) {\n    return state; // Indicate that this shouldn't result in an emit.\n  }\n\n  var sizeUpdatedState = state.setIn(['currentPosition', 'height'], action.yVisible ? action.yVisible * 1.2 : state.getIn(['currentPosition', 'height'])).setIn(['currentPosition', 'width'], action.xVisible || state.getIn(['currentPosition', 'width']));\n  var visibleRecordCount = getVisibleRecordCount(sizeUpdatedState);\n  var visibleDataLength = helpers.getDataSetSize(sizeUpdatedState);\n  var rowHeight = sizeUpdatedState.getIn(['positionConfig', 'rowHeight']);\n  var verticalScrollPosition = action.yScrollPosition || 0;\n  var horizontalScrollPosition = action.xScrollPosition || 0; // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n\n  var renderedStartDisplayIndex = Math.max(0, Math.floor(Math.floor(verticalScrollPosition / rowHeight) - visibleRecordCount * 0.25));\n  var renderedEndDisplayIndex = Math.min(Math.floor(renderedStartDisplayIndex + visibleRecordCount * 2), visibleDataLength - 1) + 1;\n  return setCurrentPosition(sizeUpdatedState, verticalScrollPosition, horizontalScrollPosition).setIn(['currentPosition', 'renderedStartDisplayIndex'], renderedStartDisplayIndex).setIn(['currentPosition', 'renderedEndDisplayIndex'], renderedEndDisplayIndex).setIn(['currentPosition', 'visibleDataLength'], visibleDataLength);\n}\n\nfunction updateRenderedData(state) {\n  var startDisplayIndex = state.getIn(['currentPosition', 'renderedStartDisplayIndex']);\n  var columns = helpers.getDataColumns(state, data);\n  var data = helpers.getDataSet(state);\n  return state.set('renderedData', helpers.getVisibleDataColumns(data.skip(startDisplayIndex).take(state.getIn(['currentPosition', 'renderedEndDisplayIndex']) - startDisplayIndex), columns));\n}","map":{"version":3,"sources":["C:/Users/shree/Desktop/smarte/node_modules/griddle-react/dist/module/plugins/position/utils.js"],"names":["Object","defineProperty","exports","value","shouldUpdateDrawnRows","setCurrentPosition","updatePositionProperties","updateRenderedData","_immutable","require","_immutable2","_interopRequireDefault","_initialState","_initialState2","obj","__esModule","default","action","state","height","getIn","width","yVisible","xVisible","yScrollChangePosition","rowHeight","visibleRecordCount","getVisibleRecordCount","startDisplayIndex","endDisplayIndex","renderedRecordCount","rowDifferenceHeight","Math","abs","yScrollPosition","xScrollPosition","setIn","force","is","get","sizeUpdatedState","visibleDataLength","helpers","getDataSetSize","verticalScrollPosition","horizontalScrollPosition","renderedStartDisplayIndex","max","floor","renderedEndDisplayIndex","min","columns","getDataColumns","data","getDataSet","set","getVisibleDataColumns","skip","take"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldUpdateDrawnRows = shouldUpdateDrawnRows;\nexports.setCurrentPosition = setCurrentPosition;\nexports.updatePositionProperties = updatePositionProperties;\nexports.updateRenderedData = updateRenderedData;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _initialState = require('./initial-state');\n\nvar _initialState2 = _interopRequireDefault(_initialState);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction shouldUpdateDrawnRows(action, state) {\n  var height = state.getIn(['currentPosition', 'height']);\n  var width = state.getIn(['currentPosition', 'width']);\n\n  // If the containers have changed size, update drawn rows.\n  if (height != action.yVisible || width != action.xVisible) return true;\n\n  var yScrollChangePosition = state.getIn(['currentPosition', 'yScrollChangePosition']);\n  var rowHeight = state.getIn(['positionConfig', 'rowHeight']);\n\n  // Get the current visible record count.\n  var visibleRecordCount = getVisibleRecordCount(state);\n\n  // Get the count of rendered rows.\n  var startDisplayIndex = state.getIn(['currentPosition', 'renderedStartDisplayIndex']);\n  var endDisplayIndex = state.getIn(['currentPosition', 'renderedEndDisplayIndex']);\n  var renderedRecordCount = endDisplayIndex - startDisplayIndex;\n\n  // Calculate the height of a third of the difference.\n  var rowDifferenceHeight = rowHeight * (renderedRecordCount - visibleRecordCount) / 3;\n\n  return Math.abs(action.yScrollPosition - yScrollChangePosition) >= rowDifferenceHeight;\n}\n\nfunction setCurrentPosition(state, yScrollPosition, xScrollPosition) {\n  return state.setIn(['currentPosition', 'yScrollChangePosition'], yScrollPosition).setIn(['currentPosition', 'xScrollChangePosition'], xScrollPosition);\n}\n\nfunction updatePositionProperties(action, state, force) {\n  if (!action.force && !shouldUpdateDrawnRows(action, state) && !_immutable2.default.is(state.get('currentPosition'), (0, _initialState2.default)().get('currentPosition'))) {\n    return state; // Indicate that this shouldn't result in an emit.\n  }\n\n  var sizeUpdatedState = state.setIn(['currentPosition', 'height'], action.yVisible ? action.yVisible * 1.2 : state.getIn(['currentPosition', 'height'])).setIn(['currentPosition', 'width'], action.xVisible || state.getIn(['currentPosition', 'width']));\n\n  var visibleRecordCount = getVisibleRecordCount(sizeUpdatedState);\n  var visibleDataLength = helpers.getDataSetSize(sizeUpdatedState);\n\n  var rowHeight = sizeUpdatedState.getIn(['positionConfig', 'rowHeight']);\n\n  var verticalScrollPosition = action.yScrollPosition || 0;\n  var horizontalScrollPosition = action.xScrollPosition || 0;\n\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  var renderedStartDisplayIndex = Math.max(0, Math.floor(Math.floor(verticalScrollPosition / rowHeight) - visibleRecordCount * 0.25));\n  var renderedEndDisplayIndex = Math.min(Math.floor(renderedStartDisplayIndex + visibleRecordCount * 2), visibleDataLength - 1) + 1;\n\n  return setCurrentPosition(sizeUpdatedState, verticalScrollPosition, horizontalScrollPosition).setIn(['currentPosition', 'renderedStartDisplayIndex'], renderedStartDisplayIndex).setIn(['currentPosition', 'renderedEndDisplayIndex'], renderedEndDisplayIndex).setIn(['currentPosition', 'visibleDataLength'], visibleDataLength);\n}\n\nfunction updateRenderedData(state) {\n  var startDisplayIndex = state.getIn(['currentPosition', 'renderedStartDisplayIndex']);\n  var columns = helpers.getDataColumns(state, data);\n  var data = helpers.getDataSet(state);\n\n  return state.set('renderedData', helpers.getVisibleDataColumns(data.skip(startDisplayIndex).take(state.getIn(['currentPosition', 'renderedEndDisplayIndex']) - startDisplayIndex), columns));\n}"]},"metadata":{},"sourceType":"script"}