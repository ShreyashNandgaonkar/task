{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GRIDDLE_INITIALIZED = GRIDDLE_INITIALIZED;\nexports.GRIDDLE_LOADED_DATA = GRIDDLE_LOADED_DATA;\nexports.GRIDDLE_SET_PAGE_SIZE = GRIDDLE_SET_PAGE_SIZE;\nexports.GRIDDLE_SET_PAGE = GRIDDLE_SET_PAGE;\nexports.GRIDDLE_SET_FILTER = GRIDDLE_SET_FILTER;\nexports.GRIDDLE_SET_SORT = GRIDDLE_SET_SORT;\nexports.GRIDDLE_TOGGLE_SETTINGS = GRIDDLE_TOGGLE_SETTINGS;\nexports.GRIDDLE_TOGGLE_COLUMN = GRIDDLE_TOGGLE_COLUMN;\nexports.GRIDDLE_UPDATE_STATE = GRIDDLE_UPDATE_STATE;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _dataUtils = require('../utils/dataUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n/*\n * State\n * ------------------\n *  data {Immutable.List} - the data that the grid is displaying\n *  loading {boolean} - is the data currently loading\n *  renderProperties {Immutable.Map} - the properties that determine how the grid should be displayed\n *  pageProperties {Immutable.Map} - the metadata for paging information\n *  .-- currentPage {int} - The current, visible page\n *  .-- pageSize {int} - The number of records to display\n *  sortProperties {Immutable.List} - the metadata surrounding sort\n *  .-- id {string} - the column id\n *  .-- sortAscending {boolean} - the direction of the sort. Index matches that of sortColumns\n **/\n\n\nfunction isColumnVisible(state, columnId) {\n  var hasRenderProperty = state.getIn(['renderProperties', 'columnProperties', columnId]);\n  var currentlyVisibleProperty = state.getIn(['renderProperties', 'columnProperties', columnId, 'visible']); // if there is a render property and visible is not set, visible is true\n\n  if (hasRenderProperty && currentlyVisibleProperty === undefined) {\n    return true;\n  } // if there is no render property currently and visible is not set\n\n\n  if (!hasRenderProperty && currentlyVisibleProperty === undefined) {\n    return false;\n  }\n\n  return currentlyVisibleProperty;\n}\n/** Sets the default render properties\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n *\n * TODO: Consider renaming this to be more in line with what it's actually doing (setting render properties)\n*/\n\n\nfunction GRIDDLE_INITIALIZED(initialState) {\n  var tempState = Object.assign({}, initialState);\n  tempState = (0, _dataUtils.addColumnPropertiesWhenNoneExist)(tempState); //TODO: could probably make this more efficient by removing data\n  // making the rest of the properties initial state and\n  // setting the mapped data on the new initial state immutable object\n\n  if (initialState.data && initialState.data.length > 0) {\n    var transformedData = (0, _dataUtils.transformData)(initialState.data, initialState.renderProperties);\n    tempState.data = transformedData.data;\n    tempState.lookup = transformedData.lookup;\n  }\n\n  return _immutable2.default.fromJS(tempState);\n}\n/** Sets the griddle data\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_LOADED_DATA(state, action) {\n  var transformedData = (0, _dataUtils.transformData)(action.data, state.get('renderProperties').toJSON());\n  return state.set('data', transformedData.data).set('lookup', transformedData.lookup).set('loading', false);\n}\n/** Sets the current page size\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_PAGE_SIZE(state, action) {\n  return state.setIn(['pageProperties', 'currentPage'], 1).setIn(['pageProperties', 'pageSize'], action.pageSize);\n}\n/** Sets the current page\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_PAGE(state, action) {\n  return state.setIn(['pageProperties', 'currentPage'], action.pageNumber);\n}\n/** Sets the filter\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_FILTER(state, action) {\n  return state.set('filter', action.filter);\n}\n/** Sets sort properties\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\n\n\nfunction GRIDDLE_SET_SORT(state, action) {\n  // turn this into an array if it's not already\n  var sortProperties = action.sortProperties.hasOwnProperty('length') ? action.sortProperties : [action.sortProperties];\n  return state.set('sortProperties', new _immutable2.default.fromJS(sortProperties));\n}\n/** Sets the settings visibility to true / false depending on the current property\n */\n\n\nfunction GRIDDLE_TOGGLE_SETTINGS(state, action) {\n  // if undefined treat as if it's false\n  var showSettings = state.get('showSettings') || false;\n  return state.set('showSettings', !showSettings);\n}\n\nfunction GRIDDLE_TOGGLE_COLUMN(state, action) {\n  // flips the visible state if the column property exists\n  var currentlyVisible = isColumnVisible(state, action.columnId);\n  return state.getIn(['renderProperties', 'columnProperties', action.columnId]) ? state.setIn(['renderProperties', 'columnProperties', action.columnId, 'visible'], !currentlyVisible) : // if the columnProperty doesn't exist, create a new one and set the property to true\n  state.setIn(['renderProperties', 'columnProperties', action.columnId], new _immutable2.default.Map({\n    id: action.columnId,\n    visible: true\n  }));\n}\n\nvar defaultRenderProperties = _immutable2.default.fromJS({});\n\nfunction GRIDDLE_UPDATE_STATE(state, action) {\n  var _action$newState = action.newState,\n      data = _action$newState.data,\n      newState = _objectWithoutProperties(_action$newState, ['data']);\n\n  var mergedState = state.mergeDeep(_immutable2.default.fromJS(newState));\n\n  if (!data) {\n    return mergedState;\n  }\n\n  var renderProperties = state.get('renderProperties', defaultRenderProperties).toJSON();\n  var transformedData = (0, _dataUtils.transformData)(data, renderProperties);\n  return mergedState.set('data', transformedData.data).set('lookup', transformedData.lookup);\n}","map":{"version":3,"sources":["C:/Users/shree/Desktop/smarte/node_modules/griddle-react/dist/module/reducers/dataReducer.js"],"names":["Object","defineProperty","exports","value","GRIDDLE_INITIALIZED","GRIDDLE_LOADED_DATA","GRIDDLE_SET_PAGE_SIZE","GRIDDLE_SET_PAGE","GRIDDLE_SET_FILTER","GRIDDLE_SET_SORT","GRIDDLE_TOGGLE_SETTINGS","GRIDDLE_TOGGLE_COLUMN","GRIDDLE_UPDATE_STATE","_immutable","require","_immutable2","_interopRequireDefault","_dataUtils","obj","__esModule","default","_objectWithoutProperties","keys","target","i","indexOf","prototype","hasOwnProperty","call","isColumnVisible","state","columnId","hasRenderProperty","getIn","currentlyVisibleProperty","undefined","initialState","tempState","assign","addColumnPropertiesWhenNoneExist","data","length","transformedData","transformData","renderProperties","lookup","fromJS","action","get","toJSON","set","setIn","pageSize","pageNumber","filter","sortProperties","showSettings","currentlyVisible","Map","id","visible","defaultRenderProperties","_action$newState","newState","mergedState","mergeDeep"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GRIDDLE_INITIALIZED = GRIDDLE_INITIALIZED;\nexports.GRIDDLE_LOADED_DATA = GRIDDLE_LOADED_DATA;\nexports.GRIDDLE_SET_PAGE_SIZE = GRIDDLE_SET_PAGE_SIZE;\nexports.GRIDDLE_SET_PAGE = GRIDDLE_SET_PAGE;\nexports.GRIDDLE_SET_FILTER = GRIDDLE_SET_FILTER;\nexports.GRIDDLE_SET_SORT = GRIDDLE_SET_SORT;\nexports.GRIDDLE_TOGGLE_SETTINGS = GRIDDLE_TOGGLE_SETTINGS;\nexports.GRIDDLE_TOGGLE_COLUMN = GRIDDLE_TOGGLE_COLUMN;\nexports.GRIDDLE_UPDATE_STATE = GRIDDLE_UPDATE_STATE;\n\nvar _immutable = require('immutable');\n\nvar _immutable2 = _interopRequireDefault(_immutable);\n\nvar _dataUtils = require('../utils/dataUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\n/*\n * State\n * ------------------\n *  data {Immutable.List} - the data that the grid is displaying\n *  loading {boolean} - is the data currently loading\n *  renderProperties {Immutable.Map} - the properties that determine how the grid should be displayed\n *  pageProperties {Immutable.Map} - the metadata for paging information\n *  .-- currentPage {int} - The current, visible page\n *  .-- pageSize {int} - The number of records to display\n *  sortProperties {Immutable.List} - the metadata surrounding sort\n *  .-- id {string} - the column id\n *  .-- sortAscending {boolean} - the direction of the sort. Index matches that of sortColumns\n **/\n\n\nfunction isColumnVisible(state, columnId) {\n  var hasRenderProperty = state.getIn(['renderProperties', 'columnProperties', columnId]);\n  var currentlyVisibleProperty = state.getIn(['renderProperties', 'columnProperties', columnId, 'visible']);\n\n  // if there is a render property and visible is not set, visible is true\n  if (hasRenderProperty && currentlyVisibleProperty === undefined) {\n    return true;\n  }\n\n  // if there is no render property currently and visible is not set\n  if (!hasRenderProperty && currentlyVisibleProperty === undefined) {\n    return false;\n  }\n\n  return currentlyVisibleProperty;\n}\n\n/** Sets the default render properties\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n *\n * TODO: Consider renaming this to be more in line with what it's actually doing (setting render properties)\n*/\nfunction GRIDDLE_INITIALIZED(initialState) {\n  var tempState = Object.assign({}, initialState);\n  tempState = (0, _dataUtils.addColumnPropertiesWhenNoneExist)(tempState);\n  //TODO: could probably make this more efficient by removing data\n  // making the rest of the properties initial state and\n  // setting the mapped data on the new initial state immutable object\n  if (initialState.data && initialState.data.length > 0) {\n    var transformedData = (0, _dataUtils.transformData)(initialState.data, initialState.renderProperties);\n    tempState.data = transformedData.data;\n    tempState.lookup = transformedData.lookup;\n  }\n\n  return _immutable2.default.fromJS(tempState);\n}\n\n/** Sets the griddle data\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\nfunction GRIDDLE_LOADED_DATA(state, action) {\n  var transformedData = (0, _dataUtils.transformData)(action.data, state.get('renderProperties').toJSON());\n\n  return state.set('data', transformedData.data).set('lookup', transformedData.lookup).set('loading', false);\n}\n\n/** Sets the current page size\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\nfunction GRIDDLE_SET_PAGE_SIZE(state, action) {\n  return state.setIn(['pageProperties', 'currentPage'], 1).setIn(['pageProperties', 'pageSize'], action.pageSize);\n}\n\n/** Sets the current page\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\nfunction GRIDDLE_SET_PAGE(state, action) {\n  return state.setIn(['pageProperties', 'currentPage'], action.pageNumber);\n}\n\n/** Sets the filter\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\nfunction GRIDDLE_SET_FILTER(state, action) {\n  return state.set('filter', action.filter);\n}\n\n/** Sets sort properties\n * @param {Immutable} state- Immutable previous state object\n * @param {Object} action - The action object to work with\n*/\nfunction GRIDDLE_SET_SORT(state, action) {\n  // turn this into an array if it's not already\n  var sortProperties = action.sortProperties.hasOwnProperty('length') ? action.sortProperties : [action.sortProperties];\n\n  return state.set('sortProperties', new _immutable2.default.fromJS(sortProperties));\n}\n\n/** Sets the settings visibility to true / false depending on the current property\n */\nfunction GRIDDLE_TOGGLE_SETTINGS(state, action) {\n  // if undefined treat as if it's false\n  var showSettings = state.get('showSettings') || false;\n\n  return state.set('showSettings', !showSettings);\n}\n\nfunction GRIDDLE_TOGGLE_COLUMN(state, action) {\n  // flips the visible state if the column property exists\n  var currentlyVisible = isColumnVisible(state, action.columnId);\n\n  return state.getIn(['renderProperties', 'columnProperties', action.columnId]) ? state.setIn(['renderProperties', 'columnProperties', action.columnId, 'visible'], !currentlyVisible) :\n\n  // if the columnProperty doesn't exist, create a new one and set the property to true\n  state.setIn(['renderProperties', 'columnProperties', action.columnId], new _immutable2.default.Map({ id: action.columnId, visible: true }));\n}\n\nvar defaultRenderProperties = _immutable2.default.fromJS({});\nfunction GRIDDLE_UPDATE_STATE(state, action) {\n  var _action$newState = action.newState,\n      data = _action$newState.data,\n      newState = _objectWithoutProperties(_action$newState, ['data']);\n\n  var mergedState = state.mergeDeep(_immutable2.default.fromJS(newState));\n  if (!data) {\n    return mergedState;\n  }\n\n  var renderProperties = state.get('renderProperties', defaultRenderProperties).toJSON();\n  var transformedData = (0, _dataUtils.transformData)(data, renderProperties);\n\n  return mergedState.set('data', transformedData.data).set('lookup', transformedData.lookup);\n}"]},"metadata":{},"sourceType":"script"}