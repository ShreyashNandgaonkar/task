{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shree\\\\Desktop\\\\task-master\\\\src\\\\components\\\\Navbar\\\\ProcessingQue.js\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useSortBy } from \"react-table\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport makeData from \"./makeData\";\nconst Styles = styled.div`\n  padding: 1rem;\n  table {\n    border-spacing: 0;\n    border: 1px solid rgba(0,0,0,0.2);\n    width: 75rem;\n    :nth-child(even){\n        background-color: rgba(0,0,0,0.2)\n    }\n    \n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n      :nth-child(even){\n        background-color: rgba(213,213,213, 0.2)\n    }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid rgba(0,0,0,0.2);\n      \n\n      :last-child {\n        border-right: 0;\n      }\n      \n    }\n   \n  }\n`;\n\nfunction Table({\n  columns,\n  data,\n  update\n}) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state: {\n      sortBy\n    }\n  } = useTable({\n    columns,\n    data\n  }, useSortBy);\n  React.useEffect(() => {\n    console.log(\"sort\");\n  }, [sortBy]); // Render the UI for your table\n\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    dataLength: rows.length,\n    next: update,\n    hasMore: true,\n    loader: /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, \"Loading...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(\"th\", Object.assign({}, column.getHeaderProps(column.getSortByToggleProps()), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }), column.render(\"Header\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 19\n    }\n  }, column.isSorted ? column.isSortedDesc ? \" ðŸ”½\" : \" ðŸ”¼\" : \"\")))))), /*#__PURE__*/React.createElement(\"tbody\", Object.assign({}, getTableBodyProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }), rows.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(\"tr\", Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(\"td\", Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }\n      }), cell.render(\"Cell\"));\n    }));\n  }))));\n}\n\nfunction ProcessingQue() {\n  const [items, setItems] = useState(makeData(40));\n  const columns = React.useMemo(() => [{\n    Header: \"Information\",\n    columns: [{\n      Header: \"Input records\",\n      accessor: \"firstName\"\n    }, {\n      Header: \"Valid records\",\n      accessor: \"lastName\"\n    }, {\n      Header: \"Actions\",\n      accessor: \"age\"\n    }, {\n      Header: \"By\",\n      accessor: \"visits\"\n    }, {\n      Header: \"List\",\n      accessor: \"status\"\n    }]\n  }, {\n    Header: \"Status\",\n    columns: [{\n      Header: \"Profile Progress\",\n      accessor: \"progress\"\n    }]\n  }], []);\n\n  const fetchMoreData = () => {\n    setTimeout(() => {\n      setItems(items.concat(makeData(2)));\n    }, 1500);\n  };\n\n  const data = React.useMemo(() => items, [items]);\n  return /*#__PURE__*/React.createElement(Styles, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data,\n    update: fetchMoreData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default ProcessingQue;","map":{"version":3,"sources":["C:/Users/shree/Desktop/task-master/src/components/Navbar/ProcessingQue.js"],"names":["React","useState","styled","useTable","useSortBy","InfiniteScroll","makeData","Styles","div","Table","columns","data","update","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","state","sortBy","useEffect","console","log","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","ProcessingQue","items","setItems","useMemo","Header","accessor","fetchMoreData","setTimeout","concat"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, useSortBy } from \"react-table\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport makeData from \"./makeData\";\n\nconst Styles = styled.div`\n  padding: 1rem;\n  table {\n    border-spacing: 0;\n    border: 1px solid rgba(0,0,0,0.2);\n    width: 75rem;\n    :nth-child(even){\n        background-color: rgba(0,0,0,0.2)\n    }\n    \n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n      :nth-child(even){\n        background-color: rgba(213,213,213, 0.2)\n    }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid rgba(0,0,0,0.2);\n      \n\n      :last-child {\n        border-right: 0;\n      }\n      \n    }\n   \n  }\n`;\n\nfunction Table({ columns, data, update }) {\n  // Use the state and functions returned from useTable to build your UI\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state: { sortBy }\n  } = useTable(\n    {\n      columns,\n      data\n    },\n    useSortBy\n  );\n\n  React.useEffect(() => {\n    console.log(\"sort\");\n  }, [sortBy]);\n\n  // Render the UI for your table\n  return (\n    <InfiniteScroll\n      dataLength={rows.length}\n      next={update}\n      hasMore={true}\n      loader={<h4>Loading...</h4>}\n    >\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                  {column.render(\"Header\")}\n                  <span>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? \" ðŸ”½\"\n                        : \" ðŸ”¼\"\n                      : \"\"}\n                  </span>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </InfiniteScroll>\n  );\n}\n\nfunction ProcessingQue() {\n  const [items, setItems] = useState(makeData(40));\n\n  const columns = React.useMemo(\n    () => [\n      {\n        Header: \"Information\",\n        columns: [\n          {\n            Header: \"Input records\",\n            accessor: \"firstName\"\n          },\n          {\n            Header: \"Valid records\",\n            accessor: \"lastName\"\n          },\n          {\n            Header: \"Actions\",\n            accessor: \"age\"\n          },\n          {\n            Header: \"By\",\n            accessor: \"visits\"\n          },\n          {\n            Header: \"List\",\n            accessor: \"status\"\n          }\n        ]\n      },\n      {\n        Header: \"Status\",\n        columns: [\n         \n          {\n            Header: \"Profile Progress\",\n            accessor: \"progress\"\n          }\n        ]\n      }\n    ],\n    []\n  );\n\n  const fetchMoreData = () => {\n    setTimeout(() => {\n      setItems(items.concat(makeData(2)));\n    }, 1500);\n  };\n\n  const data = React.useMemo(() => items, [items]);\n  return (\n    <Styles>\n      <Table columns={columns} data={data} update={fetchMoreData} />\n    </Styles>\n  );\n}\n\nexport default ProcessingQue;"]},"metadata":{},"sourceType":"module"}