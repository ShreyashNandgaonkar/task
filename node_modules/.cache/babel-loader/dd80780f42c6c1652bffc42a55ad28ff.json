{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visibleRowIdsSelector = exports.visibleDataSelector = exports.currentPageDataSelector = exports.bottomSpacerSelector = exports.topSpacerSelector = exports.endIndexSelector = exports.startIndexSelector = exports.verticalScrollChangeSelector = exports.hoizontalScrollChangeSelector = exports.visibleDataLengthSelector = exports.visibleRecordCountSelector = exports.tableWidthSelector = exports.tableHeightSelector = exports.currentHeightSelector = exports.rowHeightSelector = exports.positionSettingsSelector = undefined;\n\nvar _reselect = require('reselect');\n\nvar _localSelectors = require('../../local/selectors/localSelectors');\n\nvar positionSettingsSelector = exports.positionSettingsSelector = function positionSettingsSelector(state) {\n  return state.get('positionSettings');\n};\n\nvar rowHeightSelector = exports.rowHeightSelector = function rowHeightSelector(state) {\n  return state.getIn(['positionSettings', 'rowHeight']);\n};\n\nvar currentHeightSelector = exports.currentHeightSelector = function currentHeightSelector(state) {\n  return state.getIn(['currentPosition', 'height']);\n};\n\nvar tableHeightSelector = exports.tableHeightSelector = function tableHeightSelector(state) {\n  return state.getIn(['positionSettings', 'tableHeight']);\n};\n\nvar tableWidthSelector = exports.tableWidthSelector = function tableWidthSelector(state) {\n  return state.getIn(['positionSettings', 'tableWidth']);\n}; // From what i can tell from the original virtual scrolling plugin...\n// 1. We want to get the visible record count\n// 2. Get the size of the dataset we're working with (whether thats local or remote)\n// 3. Figure out the renderedStart and End display index\n// 4. Show only the records that'd fall in the render indexes\n\n/** Gets the number of viisble rows based on the height of the container and the rowHeight\n */\n\n\nvar visibleRecordCountSelector = exports.visibleRecordCountSelector = (0, _reselect.createSelector)(rowHeightSelector, currentHeightSelector, function (rowHeight, currentHeight) {\n  return Math.ceil(currentHeight / rowHeight);\n});\nvar visibleDataLengthSelector = exports.visibleDataLengthSelector = (0, _reselect.createSelector)(_localSelectors.sortedDataSelector, function (sortedData) {\n  return sortedData.size;\n});\n\nvar hoizontalScrollChangeSelector = exports.hoizontalScrollChangeSelector = function hoizontalScrollChangeSelector(state) {\n  return state.getIn(['currentPosition', 'xScrollChangePosition']) || 0;\n};\n\nvar verticalScrollChangeSelector = exports.verticalScrollChangeSelector = function verticalScrollChangeSelector(state) {\n  return state.getIn(['currentPosition', 'yScrollChangePosition']) || 0;\n};\n\nvar startIndexSelector = exports.startIndexSelector = (0, _reselect.createSelector)(verticalScrollChangeSelector, rowHeightSelector, visibleRecordCountSelector, function (verticalScrollPosition, rowHeight, visibleRecordCount) {\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  return Math.max(0, Math.floor(Math.floor(verticalScrollPosition / rowHeight) - visibleRecordCount * 0.25));\n});\nvar endIndexSelector = exports.endIndexSelector = (0, _reselect.createSelector)(startIndexSelector, visibleRecordCountSelector, visibleDataLengthSelector, function (startDisplayIndex, visibleRecordCount, visibleDataLength) {\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  return Math.min(Math.floor(startDisplayIndex + visibleRecordCount * 2), visibleDataLength - 1) + 1;\n});\nvar topSpacerSelector = exports.topSpacerSelector = (0, _reselect.createSelector)(rowHeightSelector, startIndexSelector, function (rowHeight, startIndex) {\n  return rowHeight * startIndex;\n});\nvar bottomSpacerSelector = exports.bottomSpacerSelector = (0, _reselect.createSelector)(rowHeightSelector, visibleDataLengthSelector, endIndexSelector, function (rowHeight, visibleDataLength, endIndex) {\n  return rowHeight * (visibleDataLength - endIndex);\n});\n/** Gets the current page of data\n * Won't be memoized :cry:\n */\n\nvar currentPageDataSelector = exports.currentPageDataSelector = function currentPageDataSelector() {\n  return (0, _reselect.createSelector)(_localSelectors.sortedDataSelector, startIndexSelector, endIndexSelector, function (sortedData, startDisplayIndex, endDisplayIndex) {\n    return sortedData.skip(startDisplayIndex).take(endDisplayIndex - startDisplayIndex);\n  }).apply(undefined, arguments);\n};\n/** Get the visible data (and only the columns that are visible)\n */\n\n\nvar visibleDataSelector = exports.visibleDataSelector = (0, _reselect.createSelector)(currentPageDataSelector, _localSelectors.visibleColumnsSelector, function (currentPageData, visibleColumns) {\n  return getVisibleDataForColumns(currentPageData, visibleColumns);\n});\n/** Gets the griddleIds for the visible rows */\n\nvar visibleRowIdsSelector = exports.visibleRowIdsSelector = (0, _reselect.createSelector)(currentPageDataSelector, function (currentPageData) {\n  return currentPageData.map(function (c) {\n    return c.get('griddleKey');\n  });\n});","map":{"version":3,"sources":["C:/Users/shree/Desktop/smarte/node_modules/griddle-react/dist/module/plugins/position/selectors/index.js"],"names":["Object","defineProperty","exports","value","visibleRowIdsSelector","visibleDataSelector","currentPageDataSelector","bottomSpacerSelector","topSpacerSelector","endIndexSelector","startIndexSelector","verticalScrollChangeSelector","hoizontalScrollChangeSelector","visibleDataLengthSelector","visibleRecordCountSelector","tableWidthSelector","tableHeightSelector","currentHeightSelector","rowHeightSelector","positionSettingsSelector","undefined","_reselect","require","_localSelectors","state","get","getIn","createSelector","rowHeight","currentHeight","Math","ceil","sortedDataSelector","sortedData","size","verticalScrollPosition","visibleRecordCount","max","floor","startDisplayIndex","visibleDataLength","min","startIndex","endIndex","endDisplayIndex","skip","take","apply","arguments","visibleColumnsSelector","currentPageData","visibleColumns","getVisibleDataForColumns","map","c"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.visibleRowIdsSelector = exports.visibleDataSelector = exports.currentPageDataSelector = exports.bottomSpacerSelector = exports.topSpacerSelector = exports.endIndexSelector = exports.startIndexSelector = exports.verticalScrollChangeSelector = exports.hoizontalScrollChangeSelector = exports.visibleDataLengthSelector = exports.visibleRecordCountSelector = exports.tableWidthSelector = exports.tableHeightSelector = exports.currentHeightSelector = exports.rowHeightSelector = exports.positionSettingsSelector = undefined;\n\nvar _reselect = require('reselect');\n\nvar _localSelectors = require('../../local/selectors/localSelectors');\n\nvar positionSettingsSelector = exports.positionSettingsSelector = function positionSettingsSelector(state) {\n  return state.get('positionSettings');\n};\nvar rowHeightSelector = exports.rowHeightSelector = function rowHeightSelector(state) {\n  return state.getIn(['positionSettings', 'rowHeight']);\n};\nvar currentHeightSelector = exports.currentHeightSelector = function currentHeightSelector(state) {\n  return state.getIn(['currentPosition', 'height']);\n};\n\nvar tableHeightSelector = exports.tableHeightSelector = function tableHeightSelector(state) {\n  return state.getIn(['positionSettings', 'tableHeight']);\n};\nvar tableWidthSelector = exports.tableWidthSelector = function tableWidthSelector(state) {\n  return state.getIn(['positionSettings', 'tableWidth']);\n};\n\n// From what i can tell from the original virtual scrolling plugin...\n// 1. We want to get the visible record count\n// 2. Get the size of the dataset we're working with (whether thats local or remote)\n// 3. Figure out the renderedStart and End display index\n// 4. Show only the records that'd fall in the render indexes\n\n/** Gets the number of viisble rows based on the height of the container and the rowHeight\n */\nvar visibleRecordCountSelector = exports.visibleRecordCountSelector = (0, _reselect.createSelector)(rowHeightSelector, currentHeightSelector, function (rowHeight, currentHeight) {\n  return Math.ceil(currentHeight / rowHeight);\n});\n\nvar visibleDataLengthSelector = exports.visibleDataLengthSelector = (0, _reselect.createSelector)(_localSelectors.sortedDataSelector, function (sortedData) {\n  return sortedData.size;\n});\n\nvar hoizontalScrollChangeSelector = exports.hoizontalScrollChangeSelector = function hoizontalScrollChangeSelector(state) {\n  return state.getIn(['currentPosition', 'xScrollChangePosition']) || 0;\n};\nvar verticalScrollChangeSelector = exports.verticalScrollChangeSelector = function verticalScrollChangeSelector(state) {\n  return state.getIn(['currentPosition', 'yScrollChangePosition']) || 0;\n};\n\nvar startIndexSelector = exports.startIndexSelector = (0, _reselect.createSelector)(verticalScrollChangeSelector, rowHeightSelector, visibleRecordCountSelector, function (verticalScrollPosition, rowHeight, visibleRecordCount) {\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  return Math.max(0, Math.floor(Math.floor(verticalScrollPosition / rowHeight) - visibleRecordCount * 0.25));\n});\n\nvar endIndexSelector = exports.endIndexSelector = (0, _reselect.createSelector)(startIndexSelector, visibleRecordCountSelector, visibleDataLengthSelector, function (startDisplayIndex, visibleRecordCount, visibleDataLength) {\n  // Inspired by : http://jsfiddle.net/vjeux/KbWJ2/9/\n  return Math.min(Math.floor(startDisplayIndex + visibleRecordCount * 2), visibleDataLength - 1) + 1;\n});\n\nvar topSpacerSelector = exports.topSpacerSelector = (0, _reselect.createSelector)(rowHeightSelector, startIndexSelector, function (rowHeight, startIndex) {\n  return rowHeight * startIndex;\n});\n\nvar bottomSpacerSelector = exports.bottomSpacerSelector = (0, _reselect.createSelector)(rowHeightSelector, visibleDataLengthSelector, endIndexSelector, function (rowHeight, visibleDataLength, endIndex) {\n  return rowHeight * (visibleDataLength - endIndex);\n});\n\n/** Gets the current page of data\n * Won't be memoized :cry:\n */\nvar currentPageDataSelector = exports.currentPageDataSelector = function currentPageDataSelector() {\n  return (0, _reselect.createSelector)(_localSelectors.sortedDataSelector, startIndexSelector, endIndexSelector, function (sortedData, startDisplayIndex, endDisplayIndex) {\n    return sortedData.skip(startDisplayIndex).take(endDisplayIndex - startDisplayIndex);\n  }).apply(undefined, arguments);\n};\n\n/** Get the visible data (and only the columns that are visible)\n */\nvar visibleDataSelector = exports.visibleDataSelector = (0, _reselect.createSelector)(currentPageDataSelector, _localSelectors.visibleColumnsSelector, function (currentPageData, visibleColumns) {\n  return getVisibleDataForColumns(currentPageData, visibleColumns);\n});\n\n/** Gets the griddleIds for the visible rows */\nvar visibleRowIdsSelector = exports.visibleRowIdsSelector = (0, _reselect.createSelector)(currentPageDataSelector, function (currentPageData) {\n  return currentPageData.map(function (c) {\n    return c.get('griddleKey');\n  });\n});"]},"metadata":{},"sourceType":"script"}