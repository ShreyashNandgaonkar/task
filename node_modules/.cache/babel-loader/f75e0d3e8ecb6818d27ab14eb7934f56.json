{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.defaultSort = defaultSort;\nexports.setSortProperties = setSortProperties;\nexports.getSortIconProps = getSortIconProps;\n/* Sorts the given data by the specified column\n * @parameter {array<object>} data - The data to sort\n * @parameter {string} column - the name of the column to sort\n * @parameter {boolean optional} sortAscending - whether or not to sort this column in ascending order\n *\n * TODO: Needs tests!\n */\n\nfunction defaultSort(data, column) {\n  var sortAscending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return data.sort(function (original, newRecord) {\n    var columnKey = column.split('.');\n    var originalValue = original.hasIn(columnKey) && original.getIn(columnKey) || '';\n    var newRecordValue = newRecord.hasIn(columnKey) && newRecord.getIn(columnKey) || ''; //TODO: This is about the most cheezy sorting check ever.\n    //Make it better\n\n    if (originalValue === newRecordValue) {\n      return 0;\n    } else if (originalValue > newRecordValue) {\n      return sortAscending ? 1 : -1;\n    } else {\n      return sortAscending ? -1 : 1;\n    }\n  });\n}\n\nfunction setSortProperties(_ref) {\n  var setSortColumn = _ref.setSortColumn,\n      sortProperty = _ref.sortProperty,\n      columnId = _ref.columnId;\n  return function () {\n    if (sortProperty === null) {\n      setSortColumn({\n        id: columnId,\n        sortAscending: true\n      });\n      return;\n    }\n\n    var newSortProperty = _extends({}, sortProperty, {\n      sortAscending: !sortProperty.sortAscending\n    });\n\n    setSortColumn(newSortProperty);\n  };\n}\n\nfunction getSortIconProps(props) {\n  var sortProperty = props.sortProperty,\n      sortAscendingIcon = props.sortAscendingIcon,\n      sortDescendingIcon = props.sortDescendingIcon;\n  var sortAscendingClassName = props.sortAscendingClassName,\n      sortDescendingClassName = props.sortDescendingClassName;\n\n  if (sortProperty) {\n    return sortProperty.sortAscending ? {\n      icon: sortAscendingIcon,\n      iconClassName: sortAscendingClassName\n    } : {\n      icon: sortDescendingIcon,\n      iconClassName: sortDescendingClassName\n    };\n  } // return null so we don't render anything if no sortProperty\n\n\n  return null;\n}","map":{"version":3,"sources":["C:/Users/shree/Desktop/smarte/node_modules/griddle-react/dist/module/utils/sortUtils.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","defaultSort","setSortProperties","getSortIconProps","data","column","sortAscending","undefined","sort","original","newRecord","columnKey","split","originalValue","hasIn","getIn","newRecordValue","_ref","setSortColumn","sortProperty","columnId","id","newSortProperty","props","sortAscendingIcon","sortDescendingIcon","sortAscendingClassName","sortDescendingClassName","icon","iconClassName"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.defaultSort = defaultSort;\nexports.setSortProperties = setSortProperties;\nexports.getSortIconProps = getSortIconProps;\n/* Sorts the given data by the specified column\n * @parameter {array<object>} data - The data to sort\n * @parameter {string} column - the name of the column to sort\n * @parameter {boolean optional} sortAscending - whether or not to sort this column in ascending order\n *\n * TODO: Needs tests!\n */\nfunction defaultSort(data, column) {\n  var sortAscending = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n  return data.sort(function (original, newRecord) {\n    var columnKey = column.split('.');\n    var originalValue = original.hasIn(columnKey) && original.getIn(columnKey) || '';\n    var newRecordValue = newRecord.hasIn(columnKey) && newRecord.getIn(columnKey) || '';\n\n    //TODO: This is about the most cheezy sorting check ever.\n    //Make it better\n    if (originalValue === newRecordValue) {\n      return 0;\n    } else if (originalValue > newRecordValue) {\n      return sortAscending ? 1 : -1;\n    } else {\n      return sortAscending ? -1 : 1;\n    }\n  });\n}\n\nfunction setSortProperties(_ref) {\n  var setSortColumn = _ref.setSortColumn,\n      sortProperty = _ref.sortProperty,\n      columnId = _ref.columnId;\n\n  return function () {\n    if (sortProperty === null) {\n      setSortColumn({ id: columnId, sortAscending: true });\n      return;\n    }\n\n    var newSortProperty = _extends({}, sortProperty, {\n      sortAscending: !sortProperty.sortAscending\n    });\n\n    setSortColumn(newSortProperty);\n  };\n}\n\nfunction getSortIconProps(props) {\n  var sortProperty = props.sortProperty,\n      sortAscendingIcon = props.sortAscendingIcon,\n      sortDescendingIcon = props.sortDescendingIcon;\n  var sortAscendingClassName = props.sortAscendingClassName,\n      sortDescendingClassName = props.sortDescendingClassName;\n\n\n  if (sortProperty) {\n    return sortProperty.sortAscending ? {\n      icon: sortAscendingIcon,\n      iconClassName: sortAscendingClassName\n    } : {\n      icon: sortDescendingIcon,\n      iconClassName: sortDescendingClassName\n    };\n  }\n\n  // return null so we don't render anything if no sortProperty\n  return null;\n}"]},"metadata":{},"sourceType":"script"}